@model WebApplication2.ViewModels.VendorDashboardVM
@{
    ViewData["Title"] = "Vendor Dashboard";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vendor Dashboard</title>
    @Html.AntiForgeryToken()
    <style>
        html, body {
            height: 100%;
            margin: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f5f5;
        }

        nav {
            background-color: #2c3e50;
            padding: 15px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .logo {
            color: white;
            font-size: 24px;
            font-weight: bold;
        }

            .logo span {
                color: #3498db;
            }

        .navwords {
            display: flex;
            gap: 20px;
            list-style: none;
            margin: 0;
            padding: 0;
        }

            .navwords a {
                color: white;
                text-decoration: none;
                padding: 8px 15px;
                border-radius: 4px;
                transition: background-color 0.3s;
            }

                .navwords a:hover {
                    background-color: #34495e;
                }

        .container {
            max-width: 1200px;
            margin: 40px auto;
            padding: 0 20px;
        }

        .section {
            background: white;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 30px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .section-title {
            font-size: 24px;
            color: #2c3e50;
            margin: 0;
        }

        .add-button {
            background-color: #3498db;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            text-decoration: none;
            transition: background-color 0.3s;
        }

            .add-button:hover {
                background-color: #2980b9;
            }

        .events-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
        }

        .event-card {
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            transition: transform 0.3s;
        }

            .event-card:hover {
                transform: translateY(-5px);
            }

        .event-image {
            width: 100%;
            height: 200px;
            object-fit: cover;
        }

        .event-details {
            padding: 15px;
        }

        .event-title {
            font-size: 18px;
            color: #2c3e50;
            margin: 0 0 10px 0;
        }

        .event-info {
            color: #7f8c8d;
            margin: 5px 0;
            font-size: 14px;
        }

        .event-actions {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }

        .edit-button, .delete-button {
            padding: 8px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            text-decoration: none;
            font-size: 14px;
            transition: background-color 0.3s;
        }

        .edit-button {
            background-color: #3498db;
            color: white;
        }

            .edit-button:hover {
                background-color: #2980b9;
            }

        .delete-button {
            background-color: #e74c3c;
            color: white;
        }

            .delete-button:hover {
                background-color: #c0392b;
            }

        .status-badge {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: bold;
            margin-left: 10px;
        }

        .status-pending {
            background-color: #f1c40f;
            color: #fff;
        }

        .status-approved {
            background-color: #2ecc71;
            color: #fff;
        }

        .status-rejected {
            background-color: #e74c3c;
            color: #fff;
        }

        .alert {
            padding: 15px;
            margin-bottom: 20px;
            border-radius: 4px;
        }

        .alert-success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .alert-error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        @@media (max-width: 768px) {
            .container {
                margin: 20px 10px;
            }

            .events-grid {
                grid-template-columns: 1fr;
            }

            .section-header {
                flex-direction: column;
                gap: 10px;
                text-align: center;
            }
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }

        .modal-content {
            background-color: #fefefe;
            margin: 5% auto;
            padding: 20px;
            border-radius: 8px;
            width: 80%;
            max-width: 800px;
            max-height: 90vh;
            overflow-y: auto;
            position: relative;
        }

        .close-modal {
            position: absolute;
            right: 20px;
            top: 10px;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            color: #666;
        }

            .close-modal:hover {
                color: #000;
            }

        .modal-form {
            display: grid;
            gap: 20px;
        }

            .modal-form .form-group {
                margin-bottom: 15px;
            }

            .modal-form label {
                display: block;
                margin-bottom: 5px;
                font-weight: 500;
                color: #2c3e50;
            }

            .modal-form input,
            .modal-form select {
                width: 100%;
                padding: 8px;
                border: 1px solid #ddd;
                border-radius: 4px;
                font-size: 14px;
            }

        .modal-buttons {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
            margin-top: 20px;
        }

            .modal-buttons button {
                padding: 10px 20px;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                font-size: 14px;
            }

        .save-changes {
            background-color: #3498db;
            color: white;
        }

            .save-changes:hover {
                background-color: #2980b9;
            }

        .cancel-edit {
            background-color: #e74c3c;
            color: white;
        }

            .cancel-edit:hover {
                background-color: #c0392b;
            }

        .team-images-preview {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }

        .team-image-preview {
            text-align: center;
        }

            .team-image-preview img {
                max-width: 150px;
                max-height: 150px;
                object-fit: contain;
            }

        .events-list {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .event-rectangle {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            overflow: hidden;
            transition: all 0.3s ease;
        }

        .event-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 20px;
            background: #f8f9fa;
            border-bottom: 1px solid #eee;
        }

        .event-title-section {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .event-thumbnail {
            width: 60px;
            height: 60px;
            object-fit: cover;
            border-radius: 4px;
        }

        .event-title {
            margin: 0;
            font-size: 18px;
            color: #2c3e50;
        }

        .event-details {
            padding: 20px;
        }

        .event-info {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
        }

            .event-info p {
                margin: 0;
                color: #666;
            }

            .event-info strong {
                color: #2c3e50;
            }

        .edit-form {
            padding: 20px;
            background: #f8f9fa;
            border-top: 1px solid #eee;
        }

        .inline-edit-form {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .form-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

            .form-group label {
                font-weight: 500;
                color: #2c3e50;
            }

            .form-group input,
            .form-group select {
                padding: 8px;
                border: 1px solid #ddd;
                border-radius: 4px;
                font-size: 14px;
            }

        .form-actions {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            margin-top: 20px;
        }

            .form-actions button {
                padding: 8px 20px;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                font-size: 14px;
                transition: background-color 0.3s;
            }

        .team-images-preview {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-right: 15px;
        }

        .team-thumbnail {
            width: 50px;
            height: 50px;
            object-fit: contain;
            border-radius: 4px;
            background: #f8f9fa;
            padding: 5px;
        }

        .vs-badge {
            font-weight: bold;
            color: #2c3e50;
            font-size: 16px;
        }
    </style>
</head>
<body>
    <nav>
        <div class="logo">Vendor<span>Hub</span></div>
        <ul class="navwords">
            <li><a href="@Url.Action("DashBoard", "Vendor")">Dashboard</a></li>
            <li><a href="@Url.Action("AddSportEvent", "Vendor")">Add Sports Event</a></li>
            <li><a href="@Url.Action("AddEntertainmentEvent", "Vendor")">Add Entertainment Event</a></li>
            <li><a href="@Url.Action("Logout", "Account")">Logout</a></li>
        </ul>
    </nav>

    <div class="container">
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success">
                @TempData["SuccessMessage"]
            </div>
        }

        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-error">
                @TempData["ErrorMessage"]
            </div>
        }

        <div class="section">
            <div class="section-header">
                <h2 class="section-title">Sports Events</h2>
                <a href="@Url.Action("AddSportEvent", "Vendor")" class="add-button">Add New Sports Event</a>
            </div>
            <div class="events-list">
                @if (Model.SportsEvents != null && Model.SportsEvents.Any())
                {
                    foreach (var sportEvent in Model.SportsEvents)
                    {
                        <div class="event-rectangle" id="event-@sportEvent.id">
                            <div class="event-header">
                                <div class="event-title-section">
                                    <div class="team-images-preview">
                                        <img src="@sportEvent.team1Image" alt="@sportEvent.team1" class="team-thumbnail" />
                                        <span class="vs-badge">VS</span>
                                        <img src="@sportEvent.team2Image" alt="@sportEvent.team2" class="team-thumbnail" />
                                    </div>
                                    <h3 class="event-title">
                                        @sportEvent.team1 vs @sportEvent.team2
                                        <span class="status-badge status-@sportEvent.status.ToLower()">@sportEvent.status</span>
                                    </h3>
                                </div>
                                <div class="event-actions">
                                    <button onclick="toggleSportEditForm(@sportEvent.id)" class="edit-button">Edit</button>
                                    <a href="@Url.Action("DeleteSportEvent", "Vendor", new { id = sportEvent.id })" class="delete-button" onclick="return confirm('Are you sure you want to delete this event?')">Delete</a>
                                </div>
                            </div>
                            <div class="event-details">
                                <div class="event-info">
                                    <p><strong>Sport:</strong> @sportEvent.sport</p>
                                    <p><strong>Tournament:</strong> @sportEvent.tournament</p>
                                    <p><strong>Stage:</strong> @sportEvent.tournamentStage</p>
                                    <p><strong>Date:</strong> @(sportEvent.date != null ? sportEvent.date.ToString("MMM dd, yyyy HH:mm") : "N/A")</p>
                                    <p><strong>Location:</strong> @sportEvent.location</p>
                                    <p><strong>Number of Seats:</strong> @sportEvent.numberOfSeats</p>
                                </div>
                            </div>
                            <div class="edit-form" id="edit-sport-form-@sportEvent.id" style="display: none;">
                                <form class="inline-edit-form" onsubmit="handleSportEditSubmit(event, @sportEvent.id)">
                                    <input type="hidden" name="id" value="@sportEvent.id" />

                                    <div class="form-row">
                                        <div class="form-group">
                                            <label for="team1-@sportEvent.id">Team 1</label>
                                            <input type="text" id="team1-@sportEvent.id" name="team1" value="@sportEvent.team1" required />
                                        </div>

                                        <div class="form-group">
                                            <label for="team2-@sportEvent.id">Team 2</label>
                                            <input type="text" id="team2-@sportEvent.id" name="team2" value="@sportEvent.team2" required />
                                        </div>
                                    </div>

                                    <div class="form-row">
                                        <div class="form-group">
                                            <label for="sport-@sportEvent.id">Sport</label>
                                            <input type="text" id="sport-@sportEvent.id" name="sport" value="@sportEvent.sport" required />
                                        </div>

                                        <div class="form-group">
                                            <label for="tournament-@sportEvent.id">Tournament</label>
                                            <input type="text" id="tournament-@sportEvent.id" name="tournament" value="@sportEvent.tournament" required />
                                        </div>
                                    </div>

                                    <div class="form-row">
                                        <div class="form-group">
                                            <label for="tournamentStage-@sportEvent.id">Tournament Stage</label>
                                            <input type="text" id="tournamentStage-@sportEvent.id" name="tournamentStage" value="@sportEvent.tournamentStage" required />
                                        </div>

                                        <div class="form-group">
                                            <label for="location-@sportEvent.id">Location</label>
                                            <input type="text" id="location-@sportEvent.id" name="location" value="@sportEvent.location" required />
                                        </div>
                                    </div>

                                    <div class="form-row">
                                        <div class="form-group">
                                            <label for="date-@sportEvent.id">Event Date and Time</label>
                                            <input type="datetime-local" id="date-@sportEvent.id" name="date" value="@sportEvent.date.ToString("yyyy-MM-ddTHH:mm")" required />
                                        </div>

                                        <div class="form-group">
                                            <label for="numberOfSeats-@sportEvent.id">Number of Seats</label>
                                            <input type="number" id="numberOfSeats-@sportEvent.id" name="numberOfSeats" value="@sportEvent.numberOfSeats" min="5000" max="200000" required />
                                        </div>
                                    </div>

                                    <div class="form-actions">
                                        <button type="button" class="cancel-edit" onclick="toggleSportEditForm(@sportEvent.id)">Cancel</button>
                                        <button type="submit" class="save-changes">Save Changes</button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p>No sports events found.</p>
                }
            </div>
        </div>

        <div class="section">
            <div class="section-header">
                <h2 class="section-title">Entertainment Events</h2>
                <a href="@Url.Action("AddEntertainmentEvent", "Vendor")" class="add-button">Add New Entertainment Event</a>
            </div>
            <div class="events-list">
                @if (Model.EntertainmentEvents != null && Model.EntertainmentEvents.Any())
                {
                    foreach (var entertainmentEvent in Model.EntertainmentEvents)
                    {
                        <div class="event-rectangle" id="event-@entertainmentEvent.EventId">
                            <div class="event-header">
                                <div class="event-title-section">
                                    <img src="@entertainmentEvent.EventImage" alt="@entertainmentEvent.PerformerName" class="event-thumbnail">
                                    <h3 class="event-title">
                                        @entertainmentEvent.PerformerName
                                        <span class="status-badge status-@entertainmentEvent.status.ToLower()">@entertainmentEvent.status</span>
                                    </h3>
                                </div>
                                <div class="event-actions">
                                    <button onclick="toggleEditForm(@entertainmentEvent.EventId)" class="edit-button">Edit</button>
                                    <a href="@Url.Action("DeleteEntertainmentEvent", "Vendor", new { id = entertainmentEvent.EventId })" class="delete-button" onclick="return confirm('Are you sure you want to delete this event?')">Delete</a>
                                </div>
                            </div>
                            <div class="event-details">
                                <div class="event-info">
                                    <p><strong>Show Category:</strong> @entertainmentEvent.showCategory</p>
                                    <p><strong>Genre:</strong> @entertainmentEvent.genre</p>
                                    <p><strong>Date:</strong> @entertainmentEvent.date.ToString("MMM dd, yyyy HH:mm")</p>
                                    <p><strong>Location:</strong> @entertainmentEvent.location</p>
                                    <p><strong>Available Seats:</strong> @entertainmentEvent.numberOfSeats</p>
                                    <p><strong>Age Restriction:</strong> @entertainmentEvent.ageRestriction+</p>
                                    <p><strong>Duration:</strong> @entertainmentEvent.duration hours</p>
                                </div>
                            </div>
                            <div class="edit-form" id="edit-form-@entertainmentEvent.EventId" style="display: none;">
                                <form class="inline-edit-form" onsubmit="handleEditSubmit(event, @entertainmentEvent.EventId)">
                                    <input type="hidden" name="id" value="@entertainmentEvent.EventId" />

                                    <div class="form-row">
                                        <div class="form-group">
                                            <label for="performerName-@entertainmentEvent.EventId">Performer Name</label>
                                            <input type="text" id="performerName-@entertainmentEvent.EventId" name="performerName" value="@entertainmentEvent.PerformerName" required />
                                        </div>

                                        <div class="form-group">
                                            <label for="showCategory-@entertainmentEvent.EventId">Show Category</label>
                                            <input type="text" id="showCategory-@entertainmentEvent.EventId" name="showCategory" value="@entertainmentEvent.showCategory" required />
                                        </div>
                                    </div>

                                    <div class="form-row">
                                        <div class="form-group">
                                            <label for="genre-@entertainmentEvent.EventId">Genre</label>
                                            <input type="text" id="genre-@entertainmentEvent.EventId" name="genre" value="@entertainmentEvent.genre" required />
                                        </div>

                                        <div class="form-group">
                                            <label for="location-@entertainmentEvent.EventId">Location</label>
                                            <input type="text" id="location-@entertainmentEvent.EventId" name="location" value="@entertainmentEvent.location" required />
                                        </div>
                                    </div>

                                    <div class="form-row">
                                        <div class="form-group">
                                            <label for="numberOfSeats-@entertainmentEvent.EventId">Available Seats</label>
                                            <input type="number" id="numberOfSeats-@entertainmentEvent.EventId" name="numberOfSeats" value="@entertainmentEvent.numberOfSeats" min="1" required />
                                        </div>

                                        <div class="form-group">
                                            <label for="ageRestriction-@entertainmentEvent.EventId">Age Restriction</label>
                                            <input type="number" id="ageRestriction-@entertainmentEvent.EventId" name="ageRestriction" value="@entertainmentEvent.ageRestriction" min="0" required />
                                        </div>
                                    </div>

                                    <div class="form-row">
                                        <div class="form-group">
                                            <label for="duration-@entertainmentEvent.EventId">Duration (hours)</label>
                                            <input type="number" id="duration-@entertainmentEvent.EventId" name="duration" value="@entertainmentEvent.duration" min="0.5" step="0.5" required />
                                        </div>

                                        <div class="form-group">
                                            <label for="date-@entertainmentEvent.EventId">Event Date and Time</label>
                                            <input type="datetime-local" id="date-@entertainmentEvent.EventId" name="date" value="@entertainmentEvent.date.ToString("yyyy-MM-ddTHH:mm")" required />
                                        </div>
                                    </div>

                                    <div class="form-row">
                                        <div class="form-group">
                                            <label for="status-@entertainmentEvent.EventId">Status</label>
                                            <select id="status-@entertainmentEvent.EventId" name="status">
                                                <option value="Pending" selected="@(entertainmentEvent.status == "Pending")">Pending</option>
                                                <option value="Accepted" selected="@(entertainmentEvent.status == "Accepted")">Accepted</option>
                                                <option value="Rejected" selected="@(entertainmentEvent.status == "Rejected")">Rejected</option>
                                            </select>
                                        </div>
                                    </div>

                                    <div class="form-actions">
                                        <button type="button" class="cancel-edit" onclick="toggleEditForm(@entertainmentEvent.EventId)">Cancel</button>
                                        <button type="submit" class="save-changes">Save Changes</button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p>No entertainment events found.</p>
                }
            </div>
        </div>

        <!-- Edit Sports Event Modal -->
        <div id="editModal" class="modal">
            <div class="modal-content">
                <span class="close-modal" onclick="closeEditModal()">&times;</span>
                <h2>Edit Sports Event</h2>
                <form id="editForm" class="modal-form">
                    <input type="hidden" id="eventId" name="id" />

                    <div class="team-images-preview">
                        <div class="team-image-preview">
                            <img id="team1Image" src="" alt="Team 1" />
                        </div>
                        <div class="team-image-preview">
                            <img id="team2Image" src="" alt="Team 2" />
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="team1">Team 1</label>
                        <input type="text" id="team1" name="team1" required />
                    </div>

                    <div class="form-group">
                        <label for="team2">Team 2</label>
                        <input type="text" id="team2" name="team2" required />
                    </div>

                    <div class="form-group">
                        <label for="sport">Sport</label>
                        <input type="text" id="sport" name="sport" required />
                    </div>

                    <div class="form-group">
                        <label for="tournament">Tournament</label>
                        <input type="text" id="tournament" name="tournament" required />
                    </div>

                    <div class="form-group">
                        <label for="tournamentStage">Tournament Stage</label>
                        <input type="text" id="tournamentStage" name="tournamentStage" required />
                    </div>

                    <div class="form-group">
                        <label for="date">Event Date and Time</label>
                        <input type="datetime-local" id="date" name="date" required />
                    </div>

                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" name="location" required />
                    </div>

                    <div class="form-group">
                        <label for="numberOfSeats">Number of Seats</label>
                        <input type="number" id="numberOfSeats" name="numberOfSeats" min="5000" max="200000" required />
                    </div>

                    <div class="form-group">
                        <label for="status">Status</label>
                        <select id="status" name="status">
                            <option value="Pending">Pending</option>
                            <option value="Accepted">Accepted</option>
                            <option value="Rejected">Rejected</option>
                        </select>
                    </div>

                    <div class="modal-buttons">
                        <button type="button" class="cancel-edit" onclick="closeEditModal()">Cancel</button>
                        <button type="submit" class="save-changes">Save Changes</button>
                    </div>
                </form>
            </div>
        </div>

        <script>
            function openEditModal(event) {
                document.getElementById('eventId').value = event.id;
                document.getElementById('team1').value = event.team1;
                document.getElementById('team2').value = event.team2;
                document.getElementById('sport').value = event.sport;
                document.getElementById('tournament').value = event.tournament;
                document.getElementById('tournamentStage').value = event.tournamentStage;
                document.getElementById('date').value = event.date ? new Date(event.date).toISOString().slice(0, 16) : '';
                document.getElementById('location').value = event.location;
                document.getElementById('numberOfSeats').value = event.numberOfSeats;
                document.getElementById('status').value = event.status;
                document.getElementById('team1Image').src = event.team1Image;
                document.getElementById('team2Image').src = event.team2Image;

                document.getElementById('editModal').style.display = 'block';
            }

            function closeEditModal() {
                document.getElementById('editModal').style.display = 'none';
            }

            document.getElementById('editForm').addEventListener('submit', async function (e) {
                e.preventDefault();

                const formData = new FormData(this);
                const eventId = formData.get('id');

                const eventData = {
                    id: parseInt(eventId),
                    team1: formData.get('team1'),
                    team2: formData.get('team2'),
                    sport: formData.get('sport'),
                    tournament: formData.get('tournament'),
                    tournamentStage: formData.get('tournamentStage'),
                    date: formData.get('date'),
                    location: formData.get('location'),
                    numberOfSeats: parseInt(formData.get('numberOfSeats')),
                    status: formData.get('status'),
                    team1Image: document.getElementById('team1Image').src,
                    team2Image: document.getElementById('team2Image').src
                };

                try {
                    const response = await fetch(`/Vendor/EditSportEvent/${eventId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify(eventData)
                    });

                    if (response.ok) {
                        window.location.reload();
                    } else {
                        const error = await response.text();
                        alert('Error updating event: ' + error);
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Error updating event: ' + error.message);
                }
            });

            // Close modal when clicking outside
            window.onclick = function (event) {
                const modal = document.getElementById('editModal');
                if (event.target == modal) {
                    closeEditModal();
                }
            }

            function toggleEditForm(eventId) {
                const editForm = document.getElementById(`edit-form-${eventId}`);
                const eventRectangle = document.getElementById(`event-${eventId}`);

                if (editForm.style.display === 'none') {
                    editForm.style.display = 'block';
                    eventRectangle.style.boxShadow = '0 4px 8px rgba(0,0,0,0.2)';
                } else {
                    editForm.style.display = 'none';
                    eventRectangle.style.boxShadow = '0 2px 4px rgba(0,0,0,0.1)';
                }
            }

            async function handleEditSubmit(event, eventId) {
                event.preventDefault();

                const form = event.target;
                const formData = new FormData(form);
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                const eventData = {
                    id: parseInt(formData.get('id')),
                    performerName: formData.get('performerName'),
                    showCategory: formData.get('showCategory'),
                    genre: formData.get('genre'),
                    location: formData.get('location'),
                    numberOfSeats: parseInt(formData.get('aviilableSeats')),
                    ageRestriction: parseInt(formData.get('ageRestriction')),
                    duration: parseFloat(formData.get('duration')),
                    date: formData.get('date'),
                    status: formData.get('status'),
                    category: "Entertainment"
                };

                try {
                    const response = await fetch(`/Vendor/EditEntertainmentEvent/${eventId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token
                        },
                        body: JSON.stringify(eventData)
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const result = await response.json();

                    if (result.success) {
                        alert(result.message);
                        window.location.reload();
                    } else {
                        alert('Error updating event: ' + result.message);
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Error updating event: ' + error.message);
                }
            }

            function toggleSportEditForm(eventId) {
                const editForm = document.getElementById(`edit-sport-form-${eventId}`);
                const eventRectangle = document.getElementById(`event-${eventId}`);

                if (editForm.style.display === 'none') {
                    editForm.style.display = 'block';
                    eventRectangle.style.boxShadow = '0 4px 8px rgba(0,0,0,0.2)';
                } else {
                    editForm.style.display = 'none';
                    eventRectangle.style.boxShadow = '0 2px 4px rgba(0,0,0,0.1)';
                }
            }

            async function handleSportEditSubmit(event, eventId) {
                event.preventDefault();

                const form = event.target;
                const formData = new FormData(form);
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                const eventData = {
                    id: parseInt(formData.get('id')),
                    team1: formData.get('team1'),
                    team2: formData.get('team2'),
                    sport: formData.get('sport'),
                    tournament: formData.get('tournament'),
                    tournamentStage: formData.get('tournamentStage'),
                    date: formData.get('date'),
                    location: formData.get('location'),
                    numberOfSeats: parseInt(formData.get('numberOfSeats')),
                    team1Image: document.querySelector(`#event-${eventId} .team-thumbnail:first-child`).src,
                    team2Image: document.querySelector(`#event-${eventId} .team-thumbnail:last-child`).src
                };

                try {
                    const response = await fetch(`/Vendor/EditSportEvent/${eventId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token
                        },
                        body: JSON.stringify(eventData)
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const result = await response.json();

                    if (result.success) {
                        alert(result.message);
                        window.location.reload();
                    } else {
                        alert('Error updating event: ' + result.message);
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Error updating event: ' + error.message);
                }
            }
        </script>
    </div>
</body>
</html>